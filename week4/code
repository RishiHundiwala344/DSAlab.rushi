RUSHI HUNDIWALA
1BM22CS224

// circular queue implementation

#include<stdio.h>
#define SIZE 100
displayLinkedList
int items[SIZE];
int front = -1, rear = -1;

int isFull(){
    if((front == rear +1) || (front == 0 && rear == SIZE - 1)) return 1;
    return 0;
}

int isEmpty(){
    if(front == -1) return 1;
    return 0;
}

void enqueue (int element){
    if(isFull()){
    printf("cant enqueue, its full\n");
    return;
    }
    if(front == -1) front = 0;
    rear = (rear +1) % SIZE;
    items[rear] = element;
    printf("pushed %d\n", element);
}

int dequeue (){
    if(isEmpty()){
    printf("cant pop, its empty\n");
    return;
    }
    int element = items[front];
    if (front == rear){
        front = -1;
    rear = -1;
    }
    else{
    front = (front +1) % SIZE;
    }
    printf("poped %d\n",element);
    return (element);
}

int main(){
    enqueue(1);
    enqueue(2);
    enqueue(3);

    dequeue();
    dequeue();
    return 0;
}


// singly linked  list implementation

#include<stdio.h>
#include<stdlib.h>

struct node{
    int value;
    struct node *next;
};

void displayLinkedList(struct node *p){
    printf("Printing linked list\n");
    while( p != NULL){
    printf("%d\n", p-> value);
    p = p -> next;
    }
}

int main(){
    struct node *head;
    struct node *one = NULL;
    struct node *two = NULL;
    struct node *three = NULL;

    one = malloc(sizeof(struct node));
    two = malloc(sizeof(struct node));
    three = malloc(sizeof(struct node));

    one-> value = 1;
    two-> value = 2;
    three -> value = 3;

    one -> next = two;
    two -> next = three;
    three -> next = NULL;

    head = one;
    displayLinkedList(head);
}
