RUSHI HUNDIWALA
1BM22CS224

// circular queue implementation

#include <stdio.h>

#define SIZE 5

int CQ[SIZE];
int front = -1, rear = -1;

void cir_enqueue(int element) {
    if ((rear + 1) % SIZE == front) {
        printf("Queue is full. Cannot insert.\n");
        return;
    }

    if (front == -1) {
        front = rear = 0;
    } else {
        rear = (rear + 1) % SIZE;
    }

    CQ[rear] = element;
    printf("Element %d inserted successfully.\n", element);
}

void cir_dequeue() {
    if (front == -1) {
        printf("Queue is empty. Cannot delete.\n");
        return;
    }

    printf("Deleted element: %d\n", CQ[front]);

    if (front == rear) {
        front = rear = -1;
    } else {
        front = (front + 1) % SIZE;
    }
}

void display() {
    if (front == -1) {
        printf("Queue is empty.\n");
        return;
    }

    int i = front;
    printf("Queue elements: ");
    do {
        printf("%d ", CQ[i]);
        i = (i + 1) % SIZE;
    } while (i != (rear + 1) % SIZE);

    printf("\n");
}

int main() {
    int choice, element;

    do {
        printf("\n1. Insert\n2. Delete\n3. Display\n4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the element to insert: ");
                scanf("%d", &element);
                cir_enqueue(element);
                break;
            case 2:
                cir_dequeue();
                break;
            case 3:
                display();
                break;
            case 4:
                printf("Exiting the program.\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 4);

    return 0;
}



// singly linked  list implementation

#include<stdio.h>
#include<stdlib.h>

struct node{
    int value;
    struct node *next;
};

void displayLinkedList(struct node *p){
    printf("Printing linked list\n");
    while( p != NULL){
    printf("%d\n", p-> value);
    p = p -> next;
    }
}

int main(){
    struct node *head;
    struct node *one = NULL;
    struct node *two = NULL;
    struct node *three = NULL;

    one = malloc(sizeof(struct node));
    two = malloc(sizeof(struct node));
    three = malloc(sizeof(struct node));

    one-> value = 1;
    two-> value = 2;
    three -> value = 3;

    one -> next = two;
    two -> next = three;
    three -> next = NULL;

    head = one;
    displayLinkedList(head);
}
